disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
glmTest <- function(input){
formVec = c()
for(i in 2:length(input)) {
if(i == 2){
formVec = paste0("input[[",i,"]]")
} else {
formVec = paste0(formVec, " + ", "input[[",i,"]]")
}
}
formOut = as.formula(paste0("input[[1]] ~ ", formVec))
output = glm(formOut)
output = output$coefficients
return(output)
}
glmTest(mtcars)
glmTest <- function(input){
formVec = c()
for(i in 2:length(input)) {
if(i == 2){
formVec = paste0("input[[",i,"]]")
} else {
formVec = paste0(formVec, " + ", "input[[",i,"]]")
}
}
formOut = as.formula(paste0("input[[1]] ~ ", formVec))
output = glm(formOut)
output = output$coefficients
return(output)
}
mtcars
glm(mpg ~ .,data = mtcars)
a = glm(mpg ~ .,data = mtcars)
a$aic
a = glm(mpg ~ .,data = mtcars)$aic
a
glmTest <- function(input){
formVec = c()
for(i in 1:length(input)) {
formVec = glm(input[[i]] ~ ., data = input)
}
output = formOut
return(output)
}
glmTest(mtcars)
glmTest <- function(input){
formVec = c()
for(i in 1:length(input)) {
formVec = glm(input[[i]] ~ ., data = input)
}
output = formVec
return(output)
}
glmTest(mtcars)
glmTest <- function(input){
formVec = c()
for(i in 1:length(input)) {
formVec = c(formVec, glm(input[[i]] ~ ., data = input))
}
output = formVec
return(output)
}
glmTest(mtcars)
glmTest <- function(input){
formVec = c()
for(i in 1:length(input)) {
formVec = c(formVec, glm(input[[i]] ~ ., data = input)$aic)
}
output = formVec
return(output)
}
glmTest(mtcars)
glm(input[[1]] ~ ., data = mtcars)$aic
glm(mtcars[[1]] ~ ., data = mtcars)$aic
glm(mtcars[[1]] ~ ., data = mtcars)
glmTest <- function(input){
formVec = c()
for(i in 1:length(input)) {
formVec = c(formVec, glm(input[[i]] ~ ., data = input)$aic)
}
output = formVec
return(output)
}
glmTest(mtcars)
glmTest <- function(input){
formVec = c()
for(i in 1:length(input)) {
formVec = c(formVec, glm(input[[i]] ~ ., data = input)$aic)
}
preOutput = data.frame("name" = colnames(input),"size" = formVec)
output = toJSON(list("name" = "query", "children" = preOutput), pretty = TRUE)
return(output)
}
glmTest <- function(input){
formVec = c()
for(i in 1:length(input)) {
formVec = c(formVec, glm(input[[i]] ~ ., data = input)$aic)
}
preOutput = data.frame("name" = colnames(input),"size" = formVec)
output = toJSON(list("name" = "query", "children" = preOutput), pretty = TRUE)
return(output)
}
glmTest(mtcars)
libary(jsonlite)
library(jsonlite)
glmTest(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
drop1(mtcars)
glmTest(mtcars)
glmTest <- function(input){
formVec = c()
for(i in 1:length(input)) {
formVec = c(formVec, glm(input[[i]] ~ ., data = input)$aic)
}
preOutput = data.frame("name" = colnames(input),"size" = abs(formVec))
output = toJSON(list("name" = "query", "children" = preOutput), pretty = TRUE)
return(output)
}
glmTest(mtcars)
library(Discovr)
disc(mtcars)
subset(mtcars)
subsitute(mtcars)
name(mtcars)
deparse(substitute(mtcars))
colnames(mtcars)
colNames = paste(names(mtcars), collapse = " ")
colNames
library(Discovr)
disc(mtcars)
library(Discovr)
library(Discovr)
disc(mtcars)
test1 = list("a" = c(1,2,3,4), "b" = c(3,4,2))
test1
names(test1)
names(test1) = c("skillor", "testor")
test1
library(Discovr)
disc.data(mtcars)
library(Discovr)
library(Discovr)
library(Discovr)
disc.data(mtcars)
library(Discovr)
disc.data(mtcars)
disc(mtcars)
studentt <- function(mat, ...) {
mat <- as.matrix(mat)
n = ncol(mat)
p.mat = matrix(NA, n, n)
diag(p.mat) = 1
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
test = t.test(mat[, i], mat[, j], ..., var.equal = TRUE)
p.mat[i, j] <- p.mat[j, i] <- test$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
signif(p.mat,3)
}
studentt(mtcars)
studentt(mtcars, paired = TRUE)
library(Discovr)
disc(mtcars, method = "paired")
library(Discovr)
disc(mtcars, method = "paired")
warnings()
library(Discovr)
disc(mtcars, method = "paired")
disc(mtcars)
disc.data(mtcars)
disc.normal(mtcars)
library(Discovr)
disc.normal(mtcars)
plot(mtcars$mpg, mtcars$qsec)
plot(mtcars$cyl, mtcars$carb)
qqnorm(rnorm(9))
qqnorm(rnorm(9))
b = qqnorm(rnorm(9))
shapiro.test(rnorm(9))
shapiro.test(rnorm(9))
shapiro.test(rnorm(9))
shapiro.test(rnorm(9))
shapiro.test(rnorm(9))
shapiro.test(rnorm(9))
shapiro.test(rnorm(9))
shapiro.test(rnorm(9))
shapiro.test(rnorm(9))
shapiro.test(rnorm(9))
shapiro.test(rnorm(9))
library(Discovr)
qqnorm(mtcars$mpg)
disc.normal(mtcars)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
disc(mtcars, method = "paired")
anovaTest <- function(mat, ...) {
mat <- as.matrix(mat)
n = ncol(mat)
p.mat = matrix(NA, n, n)
diag(p.mat) = 1
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
test = aov(mat[, i] ~ mat[, j])
p.mat[i, j] <- p.mat[j, i] <- test$coefficients[2]
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
signif(p.mat,3)
}
anovaTest(mtcars)
a= anovaTest(mtcars)
which( a > 0.05)
length(which( a > 0.05))
library(Discovr)
disc(mtcars, method = "paired")
length(which( a > 0.05))/length(a)
length(a)
colors()
colors()[23]
library(Discovr)
disc(mtcars, method = "paired")
disc(mtcars)
library(Discovr)
disc(mtcars)
colorTransla <- function(input, bigger = TRUE){
if(bigger == TRUE){
length(which( input > 0.05))/length(input)
} else {
length(which( input < 0.05))/length(input)
}
}
colorTransla(anovaTest(mtcars))
colfunc<-colorRampPalette(c("red","yellow","springgreen","royalblue"))
colfunc
colfunc(30)
colfunc(20)
colfunc(10)
colfunc(10)[3]
library(Discovr)
disc(mtcars)
colorTransla <- function(input, bigger = TRUE){
if(bigger == TRUE){
x = length(which( input > 0.05))/length(input)
} else {
x = length(which( input < 0.05))/length(input)
}
colorRange <- colorRampPalette(c("red","yellow","springgreen","royalblue"))
col = colorRange(100)
x = round(x * 100)
return(x)
}
colorTransla(anovaTest(mtcars))
round(44.4)
round(44.434)
colorRange <- colorRampPalette(c("red","yellow","springgreen","royalblue"))
col = colorRange(100)
col[44]
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
shapiroT <- function(x){
resultVec = c()
shapTest = lapply(x, shapiro.test)
for(i in 1:length(x)){
resultVec = c(resultVec, shapTest[[i]]$p.value)
}
preOutput = data.frame("name" = names(x),"size" = resultVec)
output = toJSON(list("name" = "query", "children" = preOutput), pretty = TRUE)
return(output)
}
a = shapiroT(mtcars)
library(jsonlite)
a = shapiroT(mtcars)
listOut <- function(input){
preVec = fromJSON(input)
return(preVec$children)
}
a
listOut(a)
length(a)
a = listOut(a)
length(a)
nrow(a)
colorTransla <- function(input, bigger = TRUE, minp = 0.05){
if(bigger == TRUE){
x = length(which( input > minp))/length(input)
} else {
x = length(which( input < minp))/length(input)
}
colorRange <- colorRampPalette(c("red","grey","green"))
col = colorRange(100)
x = round(x * 100)
return(col[x])
}
colorTransla(a)
which(a > 0.05)
which(a < 0.05)
length(a)
colorTransla <- function(input, bigger = TRUE, minp = 0.05, datatab = FALSE){
if(datatab = FALSE){
if(bigger == TRUE){
x = length(which( input > minp))/length(input)
} else {
x = length(which( input < minp))/length(input)
}
} else  {
if(bigger == TRUE){
x = length(which( input > minp))/nrow(input)
} else {
x = length(which( input < minp))/nrow(input)
}
}
colorRange <- colorRampPalette(c("red","grey","green"))
col = colorRange(100)
x = round(x * 100)
return(col[x])
}
colorTransla <- function(input, bigger = TRUE, minp = 0.05, datatab = FALSE){
if(datatab = FALSE){
if(bigger == TRUE){
x = length(which( input > minp))/length(input)
} else {
x = length(which( input < minp))/length(input)
}
} else  {
if(bigger == TRUE){
x = length(which( input > minp))/nrow(input)
} else {
x = length(which( input < minp))/nrow(input)
}
}
colorRange <- colorRampPalette(c("red","grey","green"))
col = colorRange(100)
x = round(x * 100)
return(col[x])
}
colorTransla <- function(input, bigger = TRUE, minp = 0.05, datatab = FALSE){
if(datatab = FALSE){
if(bigger == TRUE){
x = length(which( input > minp))/length(input)
} else {
x = length(which( input < minp))/length(input)
}
} else {
if(bigger == TRUE){
x = length(which( input > minp))/nrow(input)
} else {
x = length(which( input < minp))/nrow(input)
}
}
colorRange <- colorRampPalette(c("red","grey","green"))
col = colorRange(100)
x = round(x * 100)
return(col[x])
}
colorTransla <- function(input, bigger = TRUE, minp = 0.05, datatab = FALSE){
if(datatab == FALSE){
if(bigger == TRUE){
x = length(which( input > minp))/length(input)
} else {
x = length(which( input < minp))/length(input)
}
} else {
if(bigger == TRUE){
x = length(which( input > minp))/nrow(input)
} else {
x = length(which( input < minp))/nrow(input)
}
}
colorRange <- colorRampPalette(c("red","grey","green"))
col = colorRange(100)
x = round(x * 100)
return(col[x])
}
shapiroT <- function(x){
resultVec = c()
shapTest = lapply(x, shapiro.test)
for(i in 1:length(x)){
resultVec = c(resultVec, shapTest[[i]]$p.value)
}
preOutput = data.frame("name" = names(x),"size" = resultVec)
output = toJSON(list("name" = "query", "children" = preOutput), pretty = TRUE)
return(output)
}
listOut <- function(input){
preVec = fromJSON(input)
return(preVec$children)
}
a = shapiroT(mtcars)
a = listOut(a)
a
colorTransla(a)
colorTransla(a, datatab = TRUE)
x = length(which( a > 0.05))/nrow(a)
a
x
length(which(is.numeric(a)))
length(which(is.integer(a)))
nrow(a)
typeof(a$size)
is.numeric(a$size)
colorTransla(a$size, datatab = TRUE)
colorTransla(a$size)
colorTransla <- function(input, bigger = TRUE, minp = 0.05){
if(bigger == TRUE){
x = length(which( input > minp))/length(input)
} else {
x = length(which( input < minp))/length(input)
}
colorRange <- colorRampPalette(c("red","grey","green"))
col = colorRange(100)
x = round(x * 100)
return(col[x])
}
colorTransla(a$size)
length(a$size)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
disc(mtcars, method = "paired")
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
disc(mtcars)
library(Discovr)
library(Discovr)
