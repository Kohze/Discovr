var.test(a[[1]],a[[2]])
b = var.test(a[[1]],a[[2]])
b$p.value
library(Discovr)
install.packages("htmlwidgets")
library(htmlwidgets)
?htmlwidgets
vignette("htmlwidgets-intro")
devtools::create("mywidget")
setwd("mywidget")
htmlwidgets::scaffoldWidget("mywidget")
devtools::create("mywidget")
setwd("mywidget")
htmlwidgets::scaffoldWidget("mywidget")
devtools::install()
library(mywidget)
mywidget("hello, world")
system("pwd")
library(data.table)
shiny::runApp('ShinyDiscovr')
runApp('ShinyDiscovr')
alpha = data.frame(c(1,2,6,3,4,8))
sum alpha$c.1..2..6..3..4..8.
sum(alpha$c.1..2..6..3..4..8.)
rep(1:5)
rep(1:5,2)
rep(1:5:2)
1:6:2
rep(1:5,by = 2)
rep(1:6,by = 2)
seq(0,10,2)
sum(seq(0,10,2))
a = function(x){}
a = c(1,2,3,4,5,6)
a[6:1]
rev(a)
aov(mtcars)
var.test(mtcars)
prcompF <- function(mat, ...) {
mat <- as.matrix(mat)
n = ncol(mat)
p.mat = matrix(NA, n, n)
diag(p.mat) = 1
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
test = var.test(mat[, i], mat[, j], ...)
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
signif(test,3)
}
prcompF(mtcars)
prcompF <- function(mat, ...) {
mat <- as.matrix(mat)
n = ncol(mat)
p.mat = matrix(NA, n, n)
diag(p.mat) = 1
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
test = var.test(mat[, i], mat[, j], ...)
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
test
}
prcompF(mtcars)
var.test(output = var.test(mtcars[[1]],mtcars[[2]])
)
var.test(output = var.test(mtcars[[1]])
)
var.test(output = var.test(mtcars$hp,mtcars$mpg)
)
var.test(mtcars$hp,mtcars$mpg)
output = var.test(mtcars$hp,mtcars$mpg)
output$p.value
output$statistic
as.numeric(output$statistic)
output = as.numeric(var.test(mtcars$hp,mtcars$mpg))
output = var.test(mtcars$hp,mtcars$mpg)
mannWhitTest <- function(mat, ...) {
mat <- as.matrix(mat)
n = ncol(mat)
p.mat = matrix(NA, n, n)
diag(p.mat) = 1
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
test = var.test(mat[, i], mat[, j], ..., paired = FALSE)
test = as.numeric(test$statistic)
p.mat[i, j] <- p.mat[j, i] <- test$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
signif(p.mat,3)
}
mannWhitTest(mtcars)
mannWhitTest <- function(mat, ...) {
mat <- as.matrix(mat)
n = ncol(mat)
p.mat = matrix(NA, n, n)
diag(p.mat) = 1
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
test = var.test(mat[, i], mat[, j])
test = as.numeric(test$statistic)
p.mat[i, j] <- p.mat[j, i] <- test$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
signif(p.mat,3)
}
mannWhitTest(mtcars)
mannWhitTest <- function(mat, ...) {
mat <- as.matrix(mat)
n = ncol(mat)
p.mat = matrix(NA, n, n)
diag(p.mat) = 1
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
test = var.test(mat[, i], mat[, j])
test = as.numeric(test$statistic)
p.mat[i, j] <- p.mat[j, i] <- test
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
signif(p.mat,3)
}
mannWhitTest(mtcars)
library(Discovr)
chisq.test(mtcars)
chisq.test(mtcars$mpg,mtcars$cyl)
output = chisq.test(mtcars$cyl,mtcars$mpg)$p.value
output
wilcoxonTest <- function(mat, ...) {
mat <- as.matrix(mat)
n = ncol(mat)
p.mat = matrix(NA, n, n)
diag(p.mat) = 1
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
test = chisq.test(mat[, i], mat[, j])
p.mat[i, j] <- p.mat[j, i] <- test$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
signif(p.mat,3)
}
wilcoxonTest(mtcars)
wilcoxonTest(mtcars)
chiSQTest <- function(mat, ...) {
mat <- as.matrix(mat)
n = ncol(mat)
p.mat = matrix(NA, n, n)
diag(p.mat) = 1
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
test = shapiro.test(mat[, i], mat[, j])
p.mat[i, j] <- p.mat[j, i] <- test$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
signif(p.mat,3)
}
chiSQTest(mtcars)
shapiro.test(mtcars)
shapiro.test(mtcars$mpg,mtcars$cyl)
shapiro.test(mtcars$mpg)
lapply(mtcars, shapiro.test)
sapply(mtcars, shapiro.test)
a =sapply(mtcars, shapiro.test)
a = map(mtcars, shapiro.test)
a = sapply(mtcars, shapiro.test)
?shapiro.test
library(Discovr)
aov(mtcars$mpg,mtcars$cyl)
aov(mtcars$mpg~mtcars$cyl)
b = aov(mtcars$mpg~mtcars$cyl)
b$coefficients
b$residuals
b$rank
b$coefficients
c = b$coefficients
c
c[1]
c[2]
chiSQTest <- function(mat, ...) {
mat <- as.matrix(mat)
n = ncol(mat)
p.mat = matrix(NA, n, n)
diag(p.mat) = 1
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
test = aov(mat[, i]~ mat[, j])
p.mat[i, j] <- p.mat[j, i] <- test$coefficients[2]
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
signif(p.mat,3)
}
chiSQTest(mtcars)
cor(mtcars, use = "complete.obs")
glm(mtcars$mpg ~ mtcars$cyl + mtcars$hp )
glm(mtcars$mpg ~ mtcars$cyl + mtcars$hp + mtcars$drat )
a = glm(mtcars$mpg ~ mtcars$cyl + mtcars$hp + mtcars$drat )
a$residuals
a$coefficients
glmTest <- function(input){
formVec = c()
for(i in 2:length(input)) {
formVec = paste0(formVec, " + ", input[[i]])
}
formOut = as.formula(paste("input[[1] ~ ", formVec))
output = glm(formOut)
return(output)
}
glmTest(mtcars)
for(i in 2:length(input)) {
formVec = paste0(formVec, " + ", input[[i]])
}
formVec
formVec = c()
input = mtcars
for(i in 2:length(input)) {
formVec = paste0(formVec, " + ", input[[i]])
}
formVec
formVec = c()
formVec = paste0(formVec, " + ", "input[[",i,"]]")
formVec
formVec = c()
for(i in 2:length(input)) {
formVec = paste0(formVec, " + ", "input[[",i,"]]")
}
formVec
formVec = c()
for(i in 2:length(input)) {
if(i == 2){
formVec = paste("input[[",i,"]]")
} else {
formVec = paste0(formVec, " + ", "input[[",i,"]]")
}
}
formVec
formVec = c()
for(i in 2:length(input)) {
if(i == 2){
formVec = paste0("input[[",i,"]]")
} else {
formVec = paste0(formVec, " + ", "input[[",i,"]]")
}
}
formVec
formOut = as.formula(paste("input[[1] ~ ", formVec))
formOut = as.formula(paste("input[[1]", formVec))
formOut = as.formula(paste("input[[1]]", formVec))
formOut = (paste("input[[1]] ~", formVec))
formOut = paste0("input[[1]] ~", formVec)
formOut
formOut = paste0("input[[1]] ~ ", formVec)
formOut
as.formula(formOut)
formOut = as.formula(paste0("input[[1]] ~ ", formVec))
output = glm(formOut)
output
output = glm(formOut)
output$coefficients
glmTest <- function(input){
formVec = c()
for(i in 2:length(input)) {
if(i == 2){
formVec = paste0("input[[",i,"]]")
} else {
formVec = paste0(formVec, " + ", "input[[",i,"]]")
}
}
formOut = as.formula(paste0("input[[1]] ~ ", formVec))
output = glm(formOut)
output = output$coefficients
return(output)
}
glmTest(mtcars)
library(Discovr)
anovaTest <- function(mat, ...) {
mat <- as.matrix(mat)
n = ncol(mat)
p.mat = matrix(NA, n, n)
diag(p.mat) = 1
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
test = shapiro.test(mat[, i])
p.mat[i, j] <- p.mat[j, i] <- test$coefficients[2]
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
signif(p.mat,3)
}
anovaTest(mtcars)
anovaTest <- function(mat, ...) {
mat <- as.matrix(mat)
n = ncol(mat)
p.mat = matrix(NA, n, n)
diag(p.mat) = 1
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
test = shapiro.test(mat[, i])
p.mat[i, j] <- p.mat[j, i] <- test$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
signif(p.mat,3)
}
anovaTest(mtcars)
shapiroT <- function(x){
resultVec = data.frame()
for(i in seq_along(x)){
resultVec = data.frame(resultVec, name(x[i]) = shapiro.test(input[[i]])$p.value)
}
}
shapiroT <- function(x){
resultVec = data.frame()
for(i in seq_along(x)){
resultVec = data.frame(resultVec, shapiro.test(input[[i]])$p.value)
}
}
shapiroT(mtcars)
shapiroT <- function(x){
resultVec = data.frame()
for(i in seq_along(x)){
if(is.numeric(x[i])){
resultVec = data.frame(resultVec, shapiro.test(input[[i]])$p.value)
}
}
}
shapiroT(mtcars)
shapiroT <- function(x){
resultVec = data.frame()
for(i in seq_along(x)){
if(is.numeric(x[i])){
resultVec = data.frame(resultVec, shapiro.test(input[[i]])$p.value)
}
}
return(resultVec)
}
shapiroT(mtcars)
shapiroT <- function(x){
resultVec = data.frame()
for(i in seq_along(x)){
if(is.numeric(x[[i]])){
resultVec = data.frame(resultVec, shapiro.test(input[[i]])$p.value)
}
}
return(resultVec)
}
shapiroT(mtcars)
shapiroT <- function(x){
resultVec = data.frame()
for(i in seq_along(x)){
if(is.numeric(x[i])){
resultVec = data.frame(resultVec, shapiro.test(input[i])$p.value)
}
}
return(resultVec)
}
shapiroT(mtcars)
shapiroT <- function(x){
resultVec = data.frame()
for(i in seq_along(x)){
if(is.numeric(x[i])){
resultVec = data.frame(resultVec, shapiro.test(x[i])$p.value)
}
}
return(resultVec)
}
shapiroT(mtcars)
shapiroT <- function(x){
resultVec = data.frame()
for(i in seq_along(x)){
resultVec = data.frame(resultVec, shapiro.test(x[i])$p.value)
}
return(resultVec)
}
shapiroT(mtcars)
sapply(shapiro.test, mtcars)
sapply(mtcars, shapiro.test)
mtcars
a =sapply(mtcars, shapiro.test)
a
typeof(a)
a[["mpq"]]
a[["mpg"]]
a =apply(mtcars, shapiro.test)
a =apply(mtcars, fun = shapiro.test)
a =apply(mtcars, FUN  = shapiro.test)
a =apply(mtcars, shapiro.test)
a =sapply(mtcars, shapiro.test)
a
a =lapply(mtcars, shapiro.test)
a
a$mpg
b = a$mpg
b$p.value
shapiroT <- function(x){
resultVec = data.frame()
shapTest = lapply(x, shapiro.test)
for(i in seq_along(x)){
resultVec = data.frame(resultVec, shapTest[[i]]$p.value)
}
return(resultVec)
}
shapiroT(mtcars)
shapTest = lapply(x, shapiro.test)
shapTest = lapply(x, shapiro.test)
shapTest = lapply(mtcars, shapiro.test)
shapTest
shapTest$mpg$p.value
shapTest[[1]]$p.value
shapiroT <- function(x){
resultVec = data.frame()
shapTest = lapply(x, shapiro.test)
for(i in 1:length(x)){
resultVec = data.frame(resultVec, shapTest[[i]]$p.value)
}
return(resultVec)
}
shapiroT(mtcars)
shapiroT <- function(x){
resultVec = c()
shapTest = lapply(x, shapiro.test)
for(i in 1:length(x)){
resultVec = c(resultVec, shapTest[[i]]$p.value)
}
return(resultVec)
}
shapiroT(mtcars)
names$mtcars
names(mtcars)
c = shapiroT(mtcars)
names(c) = names(mtcars)
c
c
c$mpg
shapiroT <- function(x){
resultVec = c()
shapTest = lapply(x, shapiro.test)
for(i in 1:length(x)){
resultVec = c(resultVec, shapTest[[i]]$p.value)
}
output = data.frame(names(x),resultVec)
return(output)
}
c = shapiroT(mtcars)
c
library(Discovr)
methodChoice <- function(method){
switch(method,
unpaired = print("unpaired"),
paired = print("paired"))
}
methodChoice(unpaired)
methodChoice("unpaired")
methodChoice <- function(method){
switch(method,
"unpaired" = print("unpaired"),
"paired" = print("paired"))
}
methodChoice("unpaired")
methodChoice <- function(method){
switch(method,
unpaired = print("unpaired1"),
paired = print("paired1"))
}
methodChoice("unpaired")
methodChoice <- function(method,x){
switch(method,
unPaired = unPairedTest(x),
paired = pairedTest(x))
}
library(Discovr)
library(Discovr)
library(Discovr)
a = c(1,2,3,4,5,6)
log(a)
library(Discovr)
shapiroT <- function(x){
resultVec = c()
shapTest = lapply(x, shapiro.test)
for(i in 1:length(x)){
resultVec = c(resultVec, shapTest[[i]]$p.value)
}
output = data.frame(names(x),resultVec)
return(output)
}
shapirotT(mtcars)
shapiroT(mtcars)
library(Discovr)
disc.normal(mtcars)
library(Discovr)
disc.normal(mtcars)
library(Discovr)
disc.normal(mtcars)
library(Discovr)
disc.normal(mtcars)
library(Discovr)
disc.normal(mtcars)
library(Discovr)
disc.normal(mtcars)
library(Discovr)
multicol(mtcars)
library(Discovr)
library(Discovr)
example(disc)
library(Discovr)
library(d4_three)
