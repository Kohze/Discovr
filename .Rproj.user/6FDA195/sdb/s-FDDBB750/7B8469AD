{
    "collab_server" : "",
    "contents" : "#' discovr() main code\n#' @param x A data.frame or data.table\n#' @param method The method indicates paired or un-paired testing\n#' @param preset As preset mutliple techniques are allowed, such as FACS or FRAP.\n#' @return The calculation output\n#' @export\ndisc <- function(x, method = \"unpaired\", preset = NULL){\n  method = as.character(y)\n  input = as.data.frame(x)\n  cols = length(input)\n  if(!is.null(application)) presetApp = as.character(preset)\n  \n  if(is.null(preset)){\n    if(method == \"paired\") pairedTest(x) else unPairedTest(x)\n  } else if(presetApp == \"facs\" | presetApp == \"FACS\") {\n    cat(\"performing FACS preset analysis\")\n  } else if(presetApp == \"frap\" | presetApp == \"FRAP\") {\n    cat(\"performing FRAP preset analysis\")\n  } else {\n    cat(\"performing FRAP preset analysis\")\n  }\n  \n  e = shapiroTest(input)\n  \n  return(e)\n}\n\n#' Output for only paired tests\n#' @param input taking the output of all statistical methods\n#' @return extacts p value of all paired tests and adds them to data.frame\npairedTest <- function(input){\n  \n  shapiroT = shapiroTest(input)\n  corT = corTest(input)\n  chiT = chiSQTest(input)\n  manwiT = mannWhitTest(input) \n  wilcoT = wilcoxonTest(input) \n  anovaT = anovaTest(input)\n  \n  #create data.frame ordered by test function\n  \n  return(output)\n}\n\n#' Output for only un-paired tests\n#' @param input taking the output of all statistical methods\n#' @return extacts p value of all un-paired tests and adds them to data.frame\nunPairedTest <- function(input){\n  \n  welchT = welchTest(input)\n  shapiroT = shapiroTest(input)\n  corT = corTest(input)\n  chiT = chiSQTest(input)\n  anovaT = anovaTest(input)\n  \n  #create data.frame ordered by test function\n  \n  return(output)\n}\n\n#' P-value extractor function\n#' @param input taking the output of all statistical methods\n#' @return extacts p value and adds them to data.frame\npValue <- function(input){\n  \n  welchT = welchTest(input)\n  shapiroT = shapiroTest(input)\n  corT = corTest(input)\n  chiT = chiSQTest(input)\n  manwiT = mannWhitTest(input) \n  wilcoT = wilcoxonTest(input) \n  anovaT = anovaTest(input)\n  \n  #create data.frame ordered by test function\n  \n  return(output)\n}\n\n#' Welchs T.Test\n#' @param input A data.frame or data.table\n#' @return indicates whether parameter are from same population\nwelchTest <- function(input){\n  output = t.test(input[[1]],input[[2]])\n  return(output)\n}\n\n#' Shapiro Wilks Test\n#' @param input A data.frame or data.table\n#' @return indicates normal distribution\nshapiroTest <- function(input){\n  output = c(shapiro.test(input[[1]]),shapiro.test(input[[2]]))\n  return(output)\n}\n\n#' Correlation Test\n#' @param input A data.frame or data.table\n#' @return indicates correlation between parameters\ncorTest <- function(input){\n  output = cor(input[[1]],input[[2]])\n  return(output)\n}\n\n#' Anova Test\n#' @param input A data.frame or data.table\n#' @return analyzes the variance of the given samples\nanovaTest <- function(input){\n  output = aov(input[[1]]~input[[2]])\n  return(output)\n}\n\n#' Chi Square Test\n#' @param input A data.frame or data.table\n#' @return analyzes goodness of fit of fittet line to dataset\nchiSQTest <- function(input){\n  output = chisq.test(input[[1]],input[[2]])\n  return(output)\n}\n\n#' Wilcoxon Test\n#' @param input A data.frame or data.table\n#' @return Alternative test for the paired t-test if data is not normal - on dependend samples\nwilcoxonTest <- function(input){\n  output = wilcox.test(input[[1]],input[[2]], paired = TRUE)\n  return(output)\n}\n\n#' Mann-Whitney U test - Wilcoxon sum rank test\n#' @param input A data.frame or data.table\n#' @return Alternative test for the paired t-test if data is not normal - on independent samples\nmannWhitTest <- function(input){\n  output = wilcox.test(input[[1]],input[[2]], paired = FALSE)\n  return(output)\n}\n\n#' PCA dimension reduction\n#' @param input A data.frame or data.table\n#' @return shows if datadimensionality can be reduced\nmannWhitTest <- function(input){\n  output = prcomp(input[[1]],input[[2]])\n  return(output)\n}",
    "created" : 1466014309884.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "983272111",
    "id" : "7B8469AD",
    "lastKnownWriteTime" : 1466113247,
    "last_content_update" : 1466113247033,
    "path" : "~/Discovr/R/discovr.R",
    "project_path" : "R/discovr.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}