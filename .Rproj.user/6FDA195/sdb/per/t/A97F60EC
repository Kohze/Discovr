{
    "collab_server" : "",
    "contents" : "#' @title discovr() \n#' @param x A data.frame or data.table\n#' @param method The method indicates \"paired\" or \"unpaired\" testing\n#' @param preset As preset mutliple techniques are allowed, such as \"FACS\" or \"FRAP\".\n#' @param style A style input such as \"heatmap\" / \"cleveland\" / \"ternary\" \n#' @return The calculation output\n#' @include graphics.R\n#' @include statisticFun.R\n#' @import future\n#' @import ggtern\n#' @import d3three\n#' @import jsonlite\n#' @examples \n#' disc(mtcars)\n#' @export\ndisc <- function(x, method = \"unPaired\", preset = NULL){\n  input = as.data.frame(x)\n\n  return(d4_three(graphicGen(methodChoice(method, input), method)))\n}\n\n#' function for the preset usage\n#' @param presetApp is the input for the specific preset\n#' @return returns modified data output specific for the choosen preset\npresetFunction <- function(presetApp, x) {\n  output = switch(presetApp, \n         facs = log(x),\n         FACS = log(x),\n         frap = cat(\"The frap algorithm from FRAPBOT will be included soon\"),\n         FRAP = cat(\"The frap algorithm from FRAPBOT will be included soon\"),\n         NULL = x)\n  return(output)\n}\n\n#' splitts calculation in paired and unpaired sections\n#' @param method is the method parameter and the \n#' @param input is the data.frame\n#' @return returns the statistical calculations for each section\ndataAdjust <- function(a){\n  result = expand.grid(a = colnames(a), b = colnames(a))\n  result$c[result$a == result$b] = TRUE\n  result$c[result$a != result$b] = FALSE\n  result = result[!result$c,]\n  \n  for(i in 1:nrow(result)){\n    result$data[i] = a[result$a[i],result$b[i]]\n  }\n  \n  result$duplicated = duplicated(result$data)\n  \n  for(i in 1:nrow(result)){\n    if(result$duplicated[i] == FALSE) {\n      result$output[i] = paste(result$a[i],result$b[i], collapse = \"/\")\n    } else {\n      result$output[i] = paste(result$b[i],result$a[i], collapse = \"/\")\n    }\n  }\n  \n  bed = result[result$duplicated == FALSE & !is.na(result$data),]\n  bed$data = abs(bed$data)\n  \n  preOutput = data.frame(\"name\" = bed$output, \"size\" = bed$data)\n  output = toJSON(list(\"name\" = \"query\", \"children\" = preOutput), pretty = TRUE)\n  return(output)\n}\n\n#' splitts calculation in paired and unpaired sections\n#' @param method is the method parameter and the \n#' @param input is the data.frame\n#' @return returns the statistical calculations for each section\ngraphicGen <- function(x, method){\n    x1 = x[[\"x1\"]]\n    x2 = dataAdjust(x[[\"x2\"]])\n    x3 = dataAdjust(x[[\"x3\"]])\n    x4 = dataAdjust(x[[\"x4\"]])\n    x5 = dataAdjust(x[[\"x5\"]])\n    x6 = dataAdjust(x[[\"x6\"]])\n    x7 = dataAdjust(x[[\"x7\"]])\n    d = paste(names(mtcars), collapse = \" \")\n    output = list(\"col1\" = \"blue\",\n                  \"col2\" = \"green\",\n                  \"col3\" = \"blue\", \n                  \"col4\" = \"green\",\n                  \"col5\" = \"blue\", \n                  \"col6\" = \"green\",\n                  \"col7\" = \"green\",\n                  \"text1\" = \"Shapiro-Wilks\",\n                  \"text1a1\" = \"Correlation\",\n                  \"text2\" = \"F-Test\",\n                  \"text3\" = \"Anova Test\",\n                  \"text4\" = \"Student t-test\",\n                  \"text5\" = \"Welch's t-test\",\n                  \"text6\" = \"Wilcoxon Test\",\n                  \"text7\" = \"bayes tree\",\n                  \"names\" = d,\n                  \"method\" = as.character(method),\n                  \"inputNames\" = x1,\n                  \"inputNames0\" = x1,\n                  \"inputNames2\" = x2,\n                  \"inputNames3\" = x3,\n                  \"inputNames4\" = x4,\n                  \"inputNames5\" = x5,\n                  \"inputNames6\" = x6,\n                  \"inputNames7\" = x7\n                  )\n    return(output)\n  }\n\n#' splitts calculation in paired and unpaired sections\n#' @param method is the method parameter and the \n#' @param input is the data.frame\n#' @return returns the statistical calculations for each section\nmethodChoice <- function(method,x){\n  output = switch(method,\n                  unPaired = unPairedTest(x),\n                  paired = pairedTest(x))\n  return(output)\n}\n\n#' Output for only paired tests\n#' @param input taking the output of all statistical methods\n#' @return extacts p value of all paired tests and adds them to data.frame\npairedTest <- function(input){\n  shapiroT %<-% shapiroT(input)\n  corT %<-% corTest(input)\n  chiT %<-% chiSQTest(input)\n  manwiT %<-% mannWhitTest(input) \n  wilcoT %<-% wilcoxonTest(input) \n  anovaT %<-% anovaTest(input)\n  \n  #create data.frame ordered by test function\n  return(output)\n}\n\n#' Output for only un-paired tests\n#' @param input taking the output of all statistical methods\n#' @return extacts p value of all un-paired tests and adds them to data.frame\nunPairedTest <- function(input){\n  welchT %<-% welchTest(input)\n  shapiroT %<-% shapiroT(input)\n  corT %<-% corTest(input)\n  chiT %<-% chiSQTest(input)\n  anovaT %<-% anovaTest(input)\n  f.test %<-% fTest(input)\n  \n  output = list(\"x1\" = shapiroT,\n                \"x2\" = f.test,\n                \"x3\" = anovaT,\n                \"x4\" = welchT,\n                \"x5\" = chiT,\n                \"x6\" = corT,\n                \"x7\" = corT)\n            \n  return(output)\n}\n\n#' @title multicol\n#' @param x A data.frame or data.table\n#' @return performing muliple calculations on a data frame with multiple columns\nmulticol <- function(x){\n  shapiroTest = disc.normal(x)\n  corTest = cor(x, use = \"complete.obs\") \n  varTest = var(x, na.rm = TRUE)\n  matrixttest = t.test.matrix(x)\n  \n  output = list(\"t.test\" = matrixttest, \"correlation\" = corTest, \"variance\" = varTest, \"shapiro\" = shapiroTest)\n  return(output)\n}\n\n#' @title disc.normal() \n#' @param x A data.frame or data.table\n#' @return showing shapiro.test output of the data.frame\n#' @export\ndisc.normal <- function(x){\n  data = lapply(x, shapiro.test)\n  pval = c()\n  for(i in 1:length(names(data))){\n    pval = c(pval,data[[names(data)[i]]]$p.value)\n  }\n  \n  nameColumn = names(x)\n  output = data.frame(\"nameColumn\" = nameColumn, \"pvalue\" = pval)\n  output$isNormalDistributed[output$pvalue < 0.05] = TRUE\n  output$isNormalDistributed[output$pvalue > 0.05] = FALSE\n  \n  #call d3.js graphic function via htmlwidgets here\n  return(output)\n}",
    "created" : 1471270569898.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "194703384",
    "id" : "A97F60EC",
    "lastKnownWriteTime" : 1471559537,
    "last_content_update" : 1471559537829,
    "path" : "~/Discovr/R/discovr.R",
    "project_path" : "R/discovr.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}