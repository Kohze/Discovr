{
    "collab_server" : "",
    "contents" : "#' Statistical Functions\n#' @include discovr.R\n#' Welchs two sample T.Test\n#' @param input A data.frame or data.table\n#' @return indicates whether parameter are from same population\n#' the logic of the function syntax was fount at http://www.sthda.com/english/wiki/matrix-of-student-t-test\nwelchTest <- function(mat, ...) {\n  mat <- as.matrix(mat)\n  n = ncol(mat)\n  p.mat = matrix(NA, n, n)\n  diag(p.mat) = 1\n  for (i in 1:(n - 1)) {\n    for (j in (i + 1):n) {\n      test = t.test(mat[, i], mat[, j], ...)\n      p.mat[i, j] <- p.mat[j, i] <- test$p.value\n    }\n  }\n  colnames(p.mat) <- rownames(p.mat) <- colnames(mat)\n  signif(p.mat,3)\n}\n\n#' Shapiro Wilks Test\n#' @param input A data.frame or data.table\n#' @return indicates normal distribution\nshapiroT <- function(x){\n  resultVec = c()\n  shapTest = lapply(x, shapiro.test)\n  for(i in 1:length(x)){\n    resultVec = c(resultVec, shapTest[[i]]$p.value)\n  }\n  preOutput = data.frame(\"name\" = names(x),\"size\" = resultVec)\n  output = toJSON(list(\"name\" = \"query\", \"children\" = preOutput), pretty = TRUE)\n  return(output)\n}\n\n#' Correlation Test\n#' @param input A data.frame or data.table\n#' @return indicates correlation between parameters\ncorTest <- function(input){\n  output = cor(input, use = \"complete.obs\")\n  return(output)\n}\n\n#' Anova Test\n#' @param input A data.frame or data.table\n#' @return analyzes the variance of the given samples\nanovaTest <- function(mat, ...) {\n  mat <- as.matrix(mat)\n  n = ncol(mat)\n  p.mat = matrix(NA, n, n)\n  diag(p.mat) = 1\n  for (i in 1:(n - 1)) {\n    for (j in (i + 1):n) {\n      test = aov(mat[, i] ~ mat[, j])\n      p.mat[i, j] <- p.mat[j, i] <- test$coefficients[2]\n    }\n  }\n  colnames(p.mat) <- rownames(p.mat) <- colnames(mat)\n  signif(p.mat,3)\n}\n\n#' Chi Square Test\n#' @param input A data.frame or data.table\n#' @return analyzes goodness of fit of fittet line to dataset\nchiSQTest <- function(mat, ...) {\n  mat <- as.matrix(mat)\n  n = ncol(mat)\n  p.mat = matrix(NA, n, n)\n  diag(p.mat) = 1\n  for (i in 1:(n - 1)) {\n    for (j in (i + 1):n) {\n      test = chisq.test(mat[, i], mat[, j])\n      p.mat[i, j] <- p.mat[j, i] <- test$p.value\n    }\n  }\n  colnames(p.mat) <- rownames(p.mat) <- colnames(mat)\n  signif(p.mat,3)\n}\n\n#' Wilcoxon Test\n#' @param input A data.frame or data.table\n#' @return Alternative test for the paired t-test if data is not normal - on dependend samples\nwilcoxonTest <- function(mat, ...) {\n  mat <- as.matrix(mat)\n  n = ncol(mat)\n  p.mat = matrix(NA, n, n)\n  diag(p.mat) = 1\n  for (i in 1:(n - 1)) {\n    for (j in (i + 1):n) {\n      test = wilcox.test(mat[, i], mat[, j], ..., paired = TRUE)\n      p.mat[i, j] <- p.mat[j, i] <- test$p.value\n    }\n  }\n  colnames(p.mat) <- rownames(p.mat) <- colnames(mat)\n  signif(p.mat,3)\n}\n\n#' Mann-Whitney U test - Wilcoxon sum rank test\n#' @param input A data.frame or data.table\n#' @return Alternative test for the paired t-test if data is not normal - on independent samples\nmannWhitTest <- function(mat, ...) {\n  mat <- as.matrix(mat)\n  n = ncol(mat)\n  p.mat = matrix(NA, n, n)\n  diag(p.mat) = 1\n  for (i in 1:(n - 1)) {\n    for (j in (i + 1):n) {\n      test = wilcox.test(mat[, i], mat[, j], ..., paired = FALSE)\n      p.mat[i, j] <- p.mat[j, i] <- test$p.value\n    }\n  }\n  colnames(p.mat) <- rownames(p.mat) <- colnames(mat)\n  signif(p.mat,3)\n}\n\n#' PCA dimension reduction\n#' @param input A data.frame or data.table\n#' @return shows if datadimensionality can be reduced\n#' indicates which percentage of all principal components that have a sigma value > 0.5\npcaReduce <- function(input){\n  pc = prcomp(x = mtcars, scale. = TRUE)\n  output = length(which(pc$sdev > 0.5))/length(pc$sdev)\n  return(output)\n}\n\n#' F-Test\n#' @param input A data.frame or data.table\n#' @return compares variances of the samples - only normal distribution\nfTest <- function(mat, ...) {\n  mat <- as.matrix(mat)\n  n = ncol(mat)\n  p.mat = matrix(NA, n, n)\n  diag(p.mat) = 1\n  for (i in 1:(n - 1)) {\n    for (j in (i + 1):n) {\n      test = var.test(mat[, i], mat[, j])\n      test = as.numeric(test$statistic)\n      p.mat[i, j] <- p.mat[j, i] <- test\n    }\n  }\n  colnames(p.mat) <- rownames(p.mat) <- colnames(mat)\n  signif(p.mat,3)\n}\n\n#' GLM\n#' @param input A data.frame or data.table\n#' @return generalized linear model\nglmTest <- function(input){\n  formVec = c()\n  for(i in 2:length(input)) {\n    if(i == 2){\n      formVec = paste0(\"input[[\",i,\"]]\")\n    } else { \n      formVec = paste0(formVec, \" + \", \"input[[\",i,\"]]\")\n    }\n  }\n  formOut = as.formula(paste0(\"input[[1]] ~ \", formVec))\n  output = glm(formOut)\n  output = output$coefficients\n  return(output)\n}",
    "created" : 1471270568546.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3085119843",
    "id" : "30AAC06A",
    "lastKnownWriteTime" : 1471468751,
    "last_content_update" : 1471468751065,
    "path" : "~/Discovr/R/statisticFun.R",
    "project_path" : "R/statisticFun.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}